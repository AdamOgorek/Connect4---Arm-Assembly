


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Mid-Term Assignment - Connect 4 - SOLUTION
    4 00000000         ;
    5 00000000         ; get, put and puts subroutines provided by jones@scss.t
                       cd.ie
    6 00000000         ;
    7 00000000         
    8 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
    9 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   10 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   11 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   12 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   13 00000000         
   14 00000000 00000006 
                       ROWS    EQU              6
   15 00000000 00000007 
                       COLUMNS EQU              7
   16 00000000         
   17 00000000                 AREA             globals, DATA, READWRITE
   18 00000000 00 00 00 
              00 00 00 
              00       BOARD   DCB              0,0,0,0,0,0,0
   19 00000007 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   20 0000000E 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   21 00000015 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   22 0000001C 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   23 00000023 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   24 0000002A         
   25 0000002A         
   26 0000002A                 AREA             RESET, CODE, READONLY
   27 00000000                 ENTRY
   28 00000000         
   29 00000000         ; initialise SP to top of RAM
   30 00000000 E59FD86C        LDR              R13, =0x40010000 ; initialse SP
                                                            
   31 00000004         
   32 00000004         ; initialise the console
   33 00000004 EB0001AA        BL               inithw
   34 00000008         
   35 00000008         ;
   36 00000008         ; your program goes here
   37 00000008         ;
   38 00000008 E59F0868 



ARM Macro Assembler    Page 2 


                       Restart LDR              R0,=BOARD   ;R0->address of the
                                                             board
   39 0000000C E3A01006        LDR              R1,=ROWS    ;R1->number of rows
                                                            
   40 00000010 E3A02007        LDR              R2,=COLUMNS ;R2-> number of col
                                                            umns
   41 00000014 EB00005F        BL               Initialize  ;initialise board t
                                                            o 0's
   42 00000018 E3A0C052        MOV              R12,#'R'    ;Current player='R'
                                                            
   43 0000001C E59F0858        LDR              r0,=str_go  ;load starting mess
                                                            age
   44 00000020 EB0001BC        BL               puts        ;put 
   45 00000024 E59F0854        LDR              R0,=str_game_mode ;
   46 00000028 EB0001BA        BL               puts        ;
   47 0000002C EB0001A7        BL               get         ;ask the user wheth
                                                            er they want to pla
                                                            y single or multi p
                                                            layer
   48 00000030 EB0001AD        BL               put         ;
   49 00000034 E350006D        CMP              R0,#'m'     ;if m input, play m
                                                            ultiplayer
   50 00000038 0A000023        BEQ              multi       ;
   51 0000003C E59F0834 
                       single  LDR              R0,=BOARD   ;load address of th
                                                            e board
   52 00000040 E3A01006        LDR              R1,=ROWS    ;r1=number of rows
   53 00000044 E3A02007        LDR              R2,=COLUMNS ;r2=number of colum
                                                            ns
   54 00000048 EB000098        BL               Draw        ;draw board
   55 0000004C E35C0052        CMP              R12,#'R'    ;if(piece=='R' 
   56 00000050 0A000002        BEQ              player      ;go to player move
   57 00000054 EB000151        BL               ComputerMove ;else make compute
                                                            rMove
   58 00000058 E3A0C052        MOV              R12,#'R'    ;after computer cha
                                                            nge the piece to pl
                                                            ayer
   59 0000005C EAFFFFF6        B                single      ;nextMove
   60 00000060 E59F081C 
                       player  LDR              R0,=str_input 
                                                            ;load input message
                                                            
   61 00000064 EB0001AB        BL               puts        ;put
   62 00000068 E59F0818        LDR              r0,=str_piece ;Output message a
                                                            bout current piece
   63 0000006C EB0001A9        BL               puts        ;
   64 00000070 E1A0000C        MOV              R0,R12      ;R0=current piece
   65 00000074 EB00019C        BL               put         ;output current pie
                                                            ce
   66 00000078 E3A0000A        MOV              R0,#0xA     ;load new line
   67 0000007C EB00019A        BL               put         ;put new line
   68 00000080 EB000192        BL               get         ;get index of the c
                                                            olumn
   69 00000084 EB000198        BL               put         ;
   70 00000088 E3500071        CMP              R0,#'q'     ;if (input='q')
   71 0000008C 0AFFFFDD        BEQ              Restart     ;reset the game
   72 00000090 E2404031        SUB              R4,R0,#0x31 ;else change index 
                                                            from char to index 
                                                            of the array



ARM Macro Assembler    Page 3 


   73 00000094 E1A01004        MOV              R1,R4       ;move index to r1
   74 00000098 E59F07D8        LDR              R0,=BOARD   ;load address of th
                                                            e board
   75 0000009C EB0000AC        BL               CanMakeMove ;check if the move 
                                                            to this column is v
                                                            alid
   76 000000A0 E3500000        CMP              R0,#0       ;if(!canMakeMove)
   77 000000A4 0A00002A        BEQ              NotValid    ;move is not valid
   78 000000A8 E59F07C8        LDR              r0,=BOARD   ;Load address of th
                                                            e board
   79 000000AC E1A01004        MOV              R1,R4       ;Column to insert
   80 000000B0 E1A0200C        MOV              R2,R12      ;Piece to insert
   81 000000B4 EB00004A        BL               MakeMove    ;Make move
   82 000000B8 E3500004        CMP              R0,#4       ;if(result>=4
   83 000000BC 2A00002A        BHS              Won         ;Game won
   84 000000C0 E3A0C059        MOV              R12,#'Y'    ;else switch to com
                                                            puter
   85 000000C4 EAFFFFDC        B                single      ;go to next move
   86 000000C8 EAFFFFFE 
                       stop    B                stop        ;stop
   87 000000CC         
   88 000000CC         
   89 000000CC E59F07A4 
                       multi   LDR              R0,=BOARD   ;load address of th
                                                            e board
   90 000000D0 E3A01006        LDR              R1,=ROWS    ;r1=number of rows
   91 000000D4 E3A02007        LDR              R2,=COLUMNS ;r2=number of colum
                                                            ns
   92 000000D8 EB000074        BL               Draw        ;draw board
   93 000000DC E59F07A0        LDR              R0,=str_input 
                                                            ;load input message
                                                            
   94 000000E0 EB00018C        BL               puts        ;put
   95 000000E4 E59F079C        LDR              r0,=str_piece ;Output message a
                                                            bout current piece
   96 000000E8 EB00018A        BL               puts        ;
   97 000000EC E1A0000C        MOV              R0,R12      ;R0=current piece
   98 000000F0 EB00017D        BL               put         ;output current pie
                                                            ce
   99 000000F4 E3A0000A        MOV              R0,#0xA     ;load new line
  100 000000F8 EB00017B        BL               put         ;put new line
  101 000000FC EB000173        BL               get         ;get index of the c
                                                            olumn
  102 00000100 EB000179        BL               put         ;
  103 00000104 E3500071        CMP              R0,#'q'     ;if (input='q')
  104 00000108 0AFFFFBE        BEQ              Restart     ;reset the game
  105 0000010C E2404031        SUB              R4,R0,#0x31 ;else change index 
                                                            from char to index 
                                                            of the array
  106 00000110 E1A01004        MOV              R1,R4       ;move index to r1
  107 00000114 E59F075C        LDR              R0,=BOARD   ;load address of th
                                                            e board
  108 00000118 EB00008D        BL               CanMakeMove ;check if the move 
                                                            to this column is v
                                                            alid
  109 0000011C E3500000        CMP              R0,#0       ;if(!canMakeMove)
  110 00000120 0A00000E        BEQ              NotValidM   ;move is not valid
  111 00000124 E59F074C        LDR              r0,=BOARD   ;Load address of th
                                                            e board



ARM Macro Assembler    Page 4 


  112 00000128 E1A01004        MOV              R1,R4       ;Column to insert
  113 0000012C E1A0200C        MOV              R2,R12      ;Piece to insert
  114 00000130 EB00002B        BL               MakeMove    ;Make move
  115 00000134 E3500004        CMP              R0,#4       ;if(result>=4
  116 00000138 2A00000B        BHS              Won         ;Game won
  117 0000013C E35C0052        CMP              R12,#'R'
  118 00000140 1A000001        BNE              toR
  119 00000144 E3A0C059        MOV              R12,#'Y'    ;else switch to com
                                                            puter
  120 00000148 EAFFFFDF        B                multi
  121 0000014C E3A0C052 
                       toR     MOV              R12,#'R'
  122 00000150 EAFFFFDD        B                multi       ;go to next move
  123 00000154         
  124 00000154         NotValid
  125 00000154 E59F0730        LDR              R0,=str_not_valid ;output not v
                                                            alid message
  126 00000158 EB00016E        BL               puts
  127 0000015C EAFFFFB6        B                single      ;get new input
  128 00000160         
  129 00000160         NotValidM
  130 00000160 E59F0724        LDR              R0,=str_not_valid ;output not v
                                                            alid message
  131 00000164 EB00016B        BL               puts
  132 00000168 EAFFFFB3        B                single      ;get new input
  133 0000016C         
  134 0000016C E59F0704 
                       Won     LDR              R0,=BOARD   ;r0=adress of the b
                                                            oard
  135 00000170 E3A01006        LDR              R1,=ROWS    ;r1=ammount of rows
                                                            
  136 00000174 E3A02007        LDR              R2,=COLUMNS ;r2=ammount of colu
                                                            mns
  137 00000178 EB00004C        BL               Draw        ;draw board
  138 0000017C E59F070C        LDR              R0,=str_congratulations
  139 00000180 EB000164        BL               puts
  140 00000184 E1A0000C        MOV              R0,R12
  141 00000188 EB000157        BL               put
  142 0000018C E59F0700        LDR              R0,=str_win_message ;display wi
                                                            n message
  143 00000190 EB000160        BL               puts        ;
  144 00000194 EAFFFFCB        B                stop
  145 00000198         ;
  146 00000198         ; your subroutines go here
  147 00000198         ;
  148 00000198         ;Initialise subroutine
  149 00000198         ;Sets all value in the BOARD to 0
  150 00000198         ;takes in the address of the Board in R0
  151 00000198         ;The number of rows in R1
  152 00000198         ;The number of columns in R2
  153 00000198         ;no return
  154 00000198         Initialize
  155 00000198 E92D47F0        PUSH             {R4-R10 ,LR} ;save registers
  156 0000019C E1A04000        MOV              R4,R0       ;R4=address of the 
                                                            BOARD
  157 000001A0 E1A05001        MOV              R5,R1       ;R5=number of rows
  158 000001A4 E1A06002        MOV              R6,R2       ;R6=number of colum
                                                            ns
  159 000001A8 E3A07000        MOV              R7,#0       ;for(i=0;



ARM Macro Assembler    Page 5 


  160 000001AC E1570005 
                       Fori    CMP              R7,R5       ;i<ROW{ 
  161 000001B0 2A00000A        BHS              INITEND     ;finish Fori
  162 000001B4 E3A08000        MOV              R8,#0       ;for(j=0;
  163 000001B8 E1580006 
                       Forj    CMP              R8,R6       ;j<COLUMN{
  164 000001BC 2A000005        BHS              eForj       ;end j loop
  165 000001C0 E0090697        MUL              R9,R7,R6    ;index=i*numberOfCo
                                                            lumns
  166 000001C4 E0899008        ADD              R9,R9,R8    ;index+=j
  167 000001C8 E3A0A030        MOV              R10,#0x30   ;0 to reset the arr
                                                            ay
  168 000001CC E7C4A009        STRB             R10,[R4,R9] ;store the 0 at Boa
                                                            rd[i,j]
  169 000001D0 E2888001        ADD              R8,R8,#1    ;j++
  170 000001D4 EAFFFFF7        B                Forj        ;}
  171 000001D8 E2877001 
                       eForj   ADD              R7,R7,#1    ;i++
  172 000001DC EAFFFFF2        B                Fori        ;}
  173 000001E0 E8BD87F0 
                       INITEND POP              {R4-R10,PC} ;restore registers
  174 000001E4         
  175 000001E4         ;Function that makes move in specified column.
  176 000001E4         ;Takes in r0:address of the board
  177 000001E4         ;R1: column where the move is made
  178 000001E4         ;R2:piece to insert
  179 000001E4         ;Returns:
  180 000001E4         ;The length of the longest substring of that color after
                        making move
  181 000001E4         MakeMove
  182 000001E4 E92D5FF0        PUSH             {R4-R12,LR} ;save registers
  183 000001E8 E1A04000        MOV              R4,R0       ;r4->address of boa
                                                            rd
  184 000001EC E1A05001        MOV              R5,R1       ;R5->column to inse
                                                            rt
  185 000001F0 E1A06002        MOV              R6,R2       ;R6-> Piece to inse
                                                            rt(R or Y)
  186 000001F4 E3A09007        LDR              R9,=COLUMNS ;load number of col
                                                            umns
  187 000001F8 E3A07000        MOV              R7,#0       ;For i=0;
  188 000001FC E0080997 
                       LOOP    MUL              R8,R7,R9    ;Calculate the 1d i
                                                            ndex of i-th column
                                                            
  189 00000200 E0888005        ADD              R8,R8,R5    ;1d index of Board[
                                                            i,j]
  190 00000204 E7D4A008        LDRB             R10,[R4,R8] ;load byte Board[i,
                                                            j]
  191 00000208 E35A0030        CMP              R10,#0x30   ;if R10!=0, insert 
                                                            at row (i-1)
  192 0000020C 1A000003        BNE              INSERT      ;
  193 00000210 E2877001        ADD              R7,R7,#1    ;else i++
  194 00000214 E3570006        CMP              R7,#ROWS    ;if i is last row
  195 00000218 0A000000        BEQ              INSERT      ;insert
  196 0000021C EAFFFFF6        B                LOOP        ;else try next row
  197 00000220 E2477001 
                       INSERT  SUB              R7,R7,#1    ;go to previous row
                                                            
  198 00000224 E0080997        MUL              R8,R7,R9    ;calculate the 1d i



ARM Macro Assembler    Page 6 


                                                            ndex of Board[i,j]
  199 00000228 E0888005        ADD              R8,R8,R5    ;
  200 0000022C E7C46008        STRB             R6,[R4,R8]  ;insert piece at Bo
                                                            ard[i,j]
  201 00000230 E3A0C000        MOV              R12,#0      ;maxResult=0
  202 00000234 E59F063C        LDR              R0,=BOARD   ;r0=adress of the b
                                                            oard
  203 00000238 E1A01007        MOV              R1,R7       ;r1= index of the r
                                                            ow where the piece 
                                                            was inserted
  204 0000023C E1A02006        MOV              R2,R6       ;r2= piece inserted
                                                            
  205 00000240 EB00004F        BL               CountRow    ;count the pieces i
                                                            n the row
  206 00000244 E15C0000        CMP              R12,R0      ;if currentMax>=res
                                                            ult
  207 00000248 2A000000        BHS              MM0         ;calculate next
  208 0000024C E1A0C000        MOV              R12,R0      ;else currentMax=re
                                                            sult
  209 00000250 E59F0620 
                       MM0     LDR              R0,=BOARD   ;r0=adress of the b
                                                            oard
  210 00000254 E1A01005        MOV              R1,R5       ;r1= index of the c
                                                            olumn where the pie
                                                            ce was inserted
  211 00000258 E1A02006        MOV              R2,R6       ;r2= piece inserted
                                                            
  212 0000025C EB000063        BL               CountCol    ;count the pieces i
                                                            n the column
  213 00000260 E15C0000        CMP              R12,R0      ;if currentMax>=res
                                                            ult
  214 00000264 2A000000        BHS              MM1         ;calculate next
  215 00000268 E1A0C000        MOV              R12,R0      ;else currentMax=re
                                                            sult
  216 0000026C E59F0604 
                       MM1     LDR              R0,=BOARD   ;r0=adress of the b
                                                            oard
  217 00000270 E1A01007        MOV              R1,R7       ;r1= index of the r
                                                            ow where the piece 
                                                            was inserted
  218 00000274 E1A02005        MOV              R2,R5       ;r2= index of the c
                                                            olumn where the pie
                                                            ce was inserted
  219 00000278 E1A03006        MOV              R3,R6       ;r3= piece inserted
                                                            
  220 0000027C EB000076        BL               CountUpDown ;Count along top le
                                                            ft to bottom right 
                                                            diagonal
  221 00000280 E15C0000        CMP              R12,R0      ;if currentMax>=res
                                                            ult
  222 00000284 2A000000        BHS              MM2         ;calculate next
  223 00000288 E1A0C000        MOV              R12,R0      ;else currentMax=re
                                                            sult
  224 0000028C E59F05E4 
                       MM2     LDR              R0,=BOARD   ;r0=adress of the b
                                                            oard
  225 00000290 E1A01007        MOV              R1,R7       ;r1= index of the r
                                                            ow where the piece 
                                                            was inserted



ARM Macro Assembler    Page 7 


  226 00000294 E1A02005        MOV              R2,R5       ;r2= index of the c
                                                            olumn where the pie
                                                            ce was inserted
  227 00000298 E1A03006        MOV              R3,R6       ;r3= piece inserted
                                                            
  228 0000029C EB000095        BL               CountDownUp ;Count along bottom
                                                             left to top right 
                                                            diagonal
  229 000002A0 E15C0000        CMP              R12,R0      ;if currentMax<resu
                                                            lt, return result
  230 000002A4 9A000000        BLS              MM3
  231 000002A8 E1A0000C        MOV              R0,R12      ;else resultToRetur
                                                            n=currentMax
  232 000002AC E8BD9FF0 
                       MM3     POP              {R4-R12,PC} ;restore registers 
                                                            and return the leng
                                                            ht of the longest s
                                                            ubstring of the ins
                                                            erted pieces
  233 000002B0         
  234 000002B0         ;Draw
  235 000002B0         ;Draws Board to console
  236 000002B0         ;Input:
  237 000002B0         ;R0->Address of the board
  238 000002B0         ;R1->Number of rows
  239 000002B0         ;R2->number of columns
  240 000002B0         Draw
  241 000002B0 E92D40F0        PUSH             {R4-R7,LR}  ;save registers
  242 000002B4 E1A04000        MOV              R4,R0       ;r4=address
  243 000002B8 E1A05001        MOV              R5,R1       ;r5=number of rows
  244 000002BC E1A06002        MOV              R6,R2       ;r6=number of colum
                                                            ns
  245 000002C0 E3A0000A        MOV              R0,#10      ;r0=new line
  246 000002C4 EB000108        BL               put         ;put new line
  247 000002C8         ;writing column numbers
  248 000002C8 E3A00020        MOV              R0,#32      ;R0=SPACE
  249 000002CC EB000106        BL               put         ;put space
  250 000002D0 E3A07000        MOV              R7,#0       ;for(i=0
  251 000002D4 E1570006 
                       DRAW0   CMP              R7,R6       ;i<COLUMNS
  252 000002D8 2A000006        BHS              DRAW1       ;
  253 000002DC E3A00020        MOV              R0,#32      ;R0=SPACE
  254 000002E0 EB000101        BL               put         ;put Space
  255 000002E4 E2870001        ADD              R0,R7,#1    ;R0=i+1
  256 000002E8 E2800030        ADD              R0,R0,#0x30 ;r0= char(i+1)
  257 000002EC EB0000FE        BL               put         ;put char(i+1)
  258 000002F0 E2877001        ADD              R7,R7,#1    ;i++
  259 000002F4 EAFFFFF6        B                DRAW0       ;loop to for
  260 000002F8         ;drawing board 
  261 000002F8 E3A07000 
                       DRAW1   MOV              R7,#0       ;for(i=0
  262 000002FC E1570005 
                       DRAW4   CMP              R7,R5       ;i<ROWS
  263 00000300 2A000010        BHS              DRAW5       ;
  264 00000304 E3A0000A        MOV              R0,#10      ;R0=new line
  265 00000308 EB0000F7        BL               put         ;put new line
  266 0000030C E2870031        ADD              R0,R7,#0x31 ;R0=char(i+1)
  267 00000310 EB0000F5        BL               put         ;put char(i+1)
  268 00000314 E3A08000        MOV              R8,#0       ;for(j=0



ARM Macro Assembler    Page 8 


  269 00000318 E1580006 
                       DRAW2   CMP              R8,R6       ;j<Columns
  270 0000031C 2A000007        BHS              DRAW3       ;
  271 00000320 E3A00020        MOV              R0,#32      ;R0->space
  272 00000324 EB0000F0        BL               put         ;put space
  273 00000328 E00A0697        MUL              R10,R7,R6   ;index=i*Columns
  274 0000032C E08AA008        ADD              R10,R10,R8  ;index+=j
  275 00000330 E7D4000A        LDRB             R0,[R4,R10] ;R0=byte Board[i,j]
                                                            
  276 00000334 EB0000EC        BL               put         ;put Board[i,j] to 
                                                            console
  277 00000338 E2888001        ADD              R8,R8,#1    ;j++
  278 0000033C EAFFFFF5        B                DRAW2       ;loop back
  279 00000340 E2877001 
                       DRAW3   ADD              R7,R7,#1    ;i++
  280 00000344 EAFFFFEC        B                DRAW4       ;loop back
  281 00000348 E3A0000A 
                       DRAW5   MOV              R0,#10      ;put new line
  282 0000034C EB0000E6        BL               put
  283 00000350 E8BD80F0        POP              {R4-R7,PC}  ;restore registers
  284 00000354         ;CanMakeMove
  285 00000354         ;Checks whether the specified column is full
  286 00000354         ;Takes the address of the board in r0
  287 00000354         ;Takes in the number of column to check in r1
  288 00000354         ;Returns boolean in R0, true(1) if column is can make mo
                       ve and false(0) if not
  289 00000354         CanMakeMove
  290 00000354 E92D4010        PUSH             {R4,LR}     ;save registers
  291 00000358 E3510000        CMP              R1,#0       ;if(column<0)
  292 0000035C BA000006        BLT              CMM0        ;return false
  293 00000360 E3510007        CMP              R1,#COLUMNS ;if column>=number 
                                                            of columns
  294 00000364 AA000004        BGE              CMM0        ;return false
  295 00000368 E7D00001        LDRB             R0,[R0,R1]  ;load the highest c
                                                            haracter of column
  296 0000036C E3500030        CMP              R0,#0x30    ;if the character i
                                                            s 0
  297 00000370 1A000001        BNE              CMM0        ;set R0 to true
  298 00000374 E3A00001        MOV              r0,#1       ;r0->true
  299 00000378 EA000000        B                CMM1
  300 0000037C E3A00000 
                       CMM0    MOV              R0,#0       ;else set R0 to fal
                                                            se
  301 00000380 E8BD8010 
                       CMM1    POP              {R4,PC}     ;return
  302 00000384         ;
  303 00000384         ;Count_row
  304 00000384         ;Returns the lenght of the longest string of passed piec
                       es in passed row
  305 00000384         ;Takes in Address of the board in R0
  306 00000384         ;index of row in R1
  307 00000384         ;Piece in R2
  308 00000384         ;Return:
  309 00000384         ;The resulting length in R0
  310 00000384         CountRow
  311 00000384 E92D5FF0        PUSH             {R4-R12,LR} ;save registers
  312 00000388 E1A04000        MOV              R4,R0       ;R4= address of the
                                                             Board
  313 0000038C E1A05001        MOV              R5,R1       ;R5->row number



ARM Macro Assembler    Page 9 


  314 00000390 E1A06002        MOV              R6,R2       ;R6->Piece to check
                                                            
  315 00000394 E3A0C000        MOV              R12,#0      ;count=0
  316 00000398 E3A00000        MOV              R0,#0       ;maxCount=0
  317 0000039C E3A07007        LDR              R7,=COLUMNS ;R7=number of eleme
                                                            nts in each row
  318 000003A0 E0090795        MUL              R9,R5,R7    ;index of first ele
                                                            ment in the row we 
                                                            are checking
  319 000003A4 E3A08000        MOV              R8,#0       ;for(j=0;
  320 000003A8 E1580007 
                       CRow0   CMP              R8,R7       ;j<number of elemen
                                                            ts in a row;
  321 000003AC 2A00000B        BHS              endCRow     ;{
  322 000003B0 E088B009        ADD              R11,R8,R9   ;
  323 000003B4 E7D4A00B        LDRB             R10,[R4,R11] ;load next char in
                                                             the row
  324 000003B8 E15A0006        CMP              R10,R6      ;if char!=passed pi
                                                            ece
  325 000003BC 1A000001        BNE              resCRow     ;reset count; else
  326 000003C0 E28CC001        ADD              R12,R12,#1  ;count++
  327 000003C4 EA000003        B                CRowFor     ;branch to j++
  328 000003C8 E150000C 
                       resCRow CMP              R0,R12      ;if(maxCount>=count
                                                            
  329 000003CC 2A000000        BHS              CRow1       ;then skip to count
                                                            =0;
  330 000003D0 E1A0000C        MOV              R0,R12      ;else maxCount=coun
                                                            t
  331 000003D4 E3A0C000 
                       CRow1   MOV              R12,#0      ;count=0;
  332 000003D8 E2888001 
                       CRowFor ADD              R8,R8,#1    ;j++
  333 000003DC EAFFFFF1        B                CRow0       ;}
  334 000003E0 E150000C 
                       endCRow CMP              R0,R12      ;at the end if(coun
                                                            t<maxCount)
  335 000003E4 2A000000        BHS              RetCRow     ;return maxCount
  336 000003E8 E1A0000C        MOV              R0,R12      ;else maxCount=coun
                                                            t
  337 000003EC E8BD9FF0 
                       RetCRow POP              {R4-R12,PC} ;restore registers 
                                                            and return
  338 000003F0         
  339 000003F0         ;CountColumn
  340 000003F0         ;Returns the length of longest substring of passed piece
                        in specified column
  341 000003F0         ;Input:
  342 000003F0         ;R0->address of the board
  343 000003F0         ;R1->column number
  344 000003F0         ;R2->which piece to count
  345 000003F0         ;Return:
  346 000003F0         ;R0->the length of the longest substring
  347 000003F0         
  348 000003F0         CountCol
  349 000003F0 E92D5FF0        PUSH             {R4-R12,LR} ;save registers
  350 000003F4 E1A04000        MOV              R4,R0       ;R4= address of the
                                                             Board
  351 000003F8 E1A05001        MOV              R5,R1       ;R5->column number



ARM Macro Assembler    Page 10 


  352 000003FC E1A06002        MOV              R6,R2       ;R6->Piece to check
                                                            
  353 00000400 E3A0C000        MOV              R12,#0      ;count=0
  354 00000404 E3A00000        MOV              R0,#0       ;maxCount=0
  355 00000408 E3A07006        MOV              R7,#ROWS    ;R7=number of colum
                                                            ns
  356 0000040C E3A09007        MOV              R9,#COLUMNS ;R9=number of rows
  357 00000410 E3A08000        MOV              R8,#0       ;for(i=0;
  358 00000414 E1580007 
                       CCol0   CMP              R8,R7       ;i<numberOfElements
                                                             in a column;
  359 00000418 2A00000B        BHS              endCCol     ;{
  360 0000041C E7D4A005        LDRB             R10,[R4,R5] ;load next char in 
                                                            the column
  361 00000420 E15A0006        CMP              R10,R6      ;if char!=passed pi
                                                            ece
  362 00000424 1A000001        BNE              resCCol     ;reset count; else
  363 00000428 E28CC001        ADD              R12,R12,#1  ;count++
  364 0000042C EA000003        B                CColFor     ;branch to j++
  365 00000430 E150000C 
                       resCCol CMP              R0,R12      ;if(maxCount>=count
                                                            
  366 00000434 2A000000        BHS              CCol1       ;then skip to count
                                                            =0
  367 00000438 E1A0000C        MOV              R0,R12      ;maxCount=count
  368 0000043C E3A0C000 
                       CCol1   MOV              R12,#0      ;count=0
  369 00000440 E2888001 
                       CColFor ADD              R8,R8,#1    ;i++
  370 00000444 E0855009        ADD              R5,R5,R9    ;go to next row
  371 00000448 EAFFFFF1        B                CCol0       ;}
  372 0000044C E150000C 
                       endCCol CMP              R0,R12      ;if at the end (cou
                                                            nt<maxCount
  373 00000450 2A000000        BHS              retCCol     ;return maxCount
  374 00000454 E1A0000C        MOV              R0,R12      ;else maxCount=coun
                                                            t
  375 00000458 E8BD9FF0 
                       retCCol POP              {R4-R12,PC} ;restore registers 
                                                            and return
  376 0000045C         
  377 0000045C         ;CountUpDown
  378 0000045C         ;Returns the length of longest sequence of passed charac
                       ter in a diagonal containing passed cell
  379 0000045C         ;Counts along the diagonal going from top-left to bottom
                       -right
  380 0000045C         ;Input:
  381 0000045C         ;R0->address of the board
  382 0000045C         ;R1->Row where the target cell is
  383 0000045C         ;R2->Column where the target cell is
  384 0000045C         ;R3->Piece which we want to count
  385 0000045C         ;Output:
  386 0000045C         ;R0->the length of the longest subsequence of passed pie
                       ce
  387 0000045C         CountUpDown
  388 0000045C E92D5FF0        PUSH             {R4-R12,LR} ;save used register
                                                            s
  389 00000460 E1A04000        MOV              R4,R0       ;R4=address of the 
                                                            board



ARM Macro Assembler    Page 11 


  390 00000464 E1A05001        MOV              R5,R1       ;R5=starting row
  391 00000468 E1A06002        MOV              R6,R2       ;R6->starting colum
                                                            n
  392 0000046C E3A0C000        MOV              R12,#0      ;count=0
  393 00000470 E3A0B007        MOV              R11,#COLUMNS ;R11=amount of col
                                                            umns
  394 00000474 E3A0A006        MOV              R10,#ROWS   ;R10=ammount of Row
                                                            s
  395 00000478 E3A00000        MOV              R0,#0       ;maxCount=0
  396 0000047C E1560005        CMP              R6,R5       ;(go to top left of
                                                             the diagonal) if i
                                                            ndex of column<inde
                                                            x of row
  397 00000480 2A000002        BHS              CUD0
  398 00000484 E0455006        SUB              R5,R5,R6    ;index of row-=inde
                                                            x of column
  399 00000488 E3A06000        MOV              R6,#0       ;index of column=0
  400 0000048C EA000001        B                CUD1
  401 00000490 E0466005 
                       CUD0    SUB              R6,R6,R5    ;else index of colu
                                                            mn-= index of row
  402 00000494 E3A05000        MOV              R5,#0       ;index of row=0
  403 00000498 E0080B95 
                       CUD1    MUL              R8,R5,R11   ;calculatin the 1d 
                                                            index of top left o
                                                            f the diagonal
  404 0000049C E0888006        ADD              R8,R8,R6
  405 000004A0 E155000A 
                       CUD2    CMP              R5,R10      ;while(index of row
                                                            <number of rows&
  406 000004A4 2A00000F        BHS              endCUD
  407 000004A8 E156000B        CMP              R6,R11      ;&&index of column<
                                                             number of columns{
                                                             
  408 000004AC 2A00000D        BHS              endCUD
  409 000004B0 E7D49008        LDRB             R9,[R4,R8]  ;load next char on 
                                                            the diagonal
  410 000004B4 E1590003        CMP              R9,R3       ;if char!=passed pi
                                                            ece
  411 000004B8 1A000001        BNE              resCUD      ;reset count; else
  412 000004BC E28CC001        ADD              R12,R12,#1  ;count++
  413 000004C0 EA000003        B                CUDFor      ;branch to incremen
                                                            ting
  414 000004C4 E150000C 
                       resCUD  CMP              R0,R12      ;if(maxCount>=count
                                                            
  415 000004C8 2A000000        BHS              CUD3        ;then skip to count
                                                            =0
  416 000004CC E1A0000C        MOV              R0,R12      ;maxCount=count
  417 000004D0 E3A0C000 
                       CUD3    MOV              R12,#0      ;count=0
  418 000004D4 E2855001 
                       CUDFor  ADD              R5,R5,#1    ;indexOfRow++
  419 000004D8 E2866001        ADD              R6,R6,#1    ;indexOfColumn++
  420 000004DC E2888007        ADD              R8,R8,#COLUMNS ;go to next row
  421 000004E0 E2888001        ADD              R8,R8,#1    ;go to next column
  422 000004E4 EAFFFFED        B                CUD2        ;loop back to while
                                                            
  423 000004E8 E150000C 



ARM Macro Assembler    Page 12 


                       endCUD  CMP              R0,R12      ;if at the end (cou
                                                            nt<maxCount
  424 000004EC 2A000000        BHS              retCUD      ;return maxCount
  425 000004F0 E1A0000C        MOV              R0,R12      ;else maxCount=coun
                                                            t
  426 000004F4 E8BD9FF0 
                       retCUD  POP              {R4-R12,PC} ;restore registers 
                                                            and return
  427 000004F8         
  428 000004F8         CountDownUp
  429 000004F8 E92D5FF0        PUSH             {R4-R12,LR} ;save used register
                                                            s
  430 000004FC E1A04000        MOV              R4,R0       ;R4=address of the 
                                                            board
  431 00000500 E1A05001        MOV              R5,R1       ;R5=starting row
  432 00000504 E1A06002        MOV              R6,R2       ;R6->starting colum
                                                            n
  433 00000508 E3A0C000        MOV              R12,#0      ;count=0
  434 0000050C E3A0B007        MOV              R11,#COLUMNS ;R11=ammount of co
                                                            lumns
  435 00000510 E3A0A006        MOV              R10,#ROWS   ;R10=ammount of row
                                                            s
  436 00000514 E04AA005        SUB              R10,R10,R5  ;calculate the dist
                                                            ance from last row 
                                                            to current row inde
                                                            x
  437 00000518 E24AA001        SUB              R10,R10,#1  ;
  438 0000051C E3A00000        MOV              R0,#0       ;maxCount=0
  439 00000520 E156000A        CMP              R6,R10      ;Check which direct
                                                            ion we need to move
                                                             farther to get to 
                                                            bottom left of the 
                                                            diagonal
  440 00000524 2A000002        BHS              CDU0        ;
  441 00000528 E0855006        ADD              R5,R5,R6    ;if(distance to the
                                                             left is smaller, r
                                                            ow+=indexOfColumn
  442 0000052C E3A06000        MOV              R6,#0       ;index of column=0
  443 00000530 EA000002        B                CDU1
  444 00000534 E046600A 
                       CDU0    SUB              R6,R6,R10   ;else(indexOfColumn
                                                            -=distance to the b
                                                            ottom
  445 00000538 E3A05006        MOV              R5,#ROWS
  446 0000053C E2455001        SUB              R5,R5,#1    ;row=last row
  447 00000540 E0080B95 
                       CDU1    MUL              R8,R5,R11   ;calculating 1d ind
                                                            ex of bottom left o
                                                            f the diagonal
  448 00000544 E0888006        ADD              R8,R8,R6    ;
  449 00000548 E3550000 
                       CDU2    CMP              R5,#0       ;while(row>0
  450 0000054C 9A00000F        BLS              endCDU      ;
  451 00000550 E156000B        CMP              R6,R11      ;&& column<numberOf
                                                            Columns
  452 00000554 2A00000D        BHS              endCDU      ;{
  453 00000558 E7D49008        LDRB             R9,[R4,R8]  ;load next char in 
                                                            the column
  454 0000055C E1590003        CMP              R9,R3       ;if char!=passed pi



ARM Macro Assembler    Page 13 


                                                            ece
  455 00000560 1A000001        BNE              resCDU      ;reset count; else
  456 00000564 E28CC001        ADD              R12,R12,#1  ;count++
  457 00000568 EA000003        B                CDUFor      ;branch to j++
  458 0000056C E150000C 
                       resCDU  CMP              R0,R12      ;if(maxCount>=count
                                                            
  459 00000570 2A000000        BHS              CDU3        ;then skip to count
                                                            =0
  460 00000574 E1A0000C        MOV              R0,R12      ;maxCount=count
  461 00000578 E3A0C000 
                       CDU3    MOV              R12,#0      ;count=0
  462 0000057C E2455001 
                       CDUFor  SUB              R5,R5,#1    ;indexOfRow--
  463 00000580 E2866001        ADD              R6,R6,#1    ;index of Column++
  464 00000584 E2488007        SUB              R8,R8,#COLUMNS 
                                                            ;go to previous row
                                                            
  465 00000588 E2888001        ADD              R8,R8,#1    ;go to next column
  466 0000058C EAFFFFED        B                CDU2        ;}go to while
  467 00000590 E150000C 
                       endCDU  CMP              R0,R12      ;if at the end (cou
                                                            nt<maxCount
  468 00000594 2A000000        BHS              retCDU      ;return maxCount
  469 00000598 E1A0000C        MOV              R0,R12      ;else maxCount=coun
                                                            t
  470 0000059C E8BD9FF0 
                       retCDU  POP              {R4-R12,PC} ;restore registers 
                                                            and return
  471 000005A0         
  472 000005A0         ;Computer Move
  473 000005A0         ;Tries to make the best move on current board by checkin
                       g what the result of moving in each column is and pickin
                       g the best
  474 000005A0         ;Makes the move by checking whats the longest string it 
                       can get, and whats the longest string the opponent could
                        get by playing in each column
  475 000005A0         ;Then in picks the highest of those and plays there, tha
                       nks to that it can try and block the player from winning
                       
  476 000005A0         ;No input
  477 000005A0         ;No return
  478 000005A0         ComputerMove
  479 000005A0 E92D5FF0        PUSH             {R4-R12,LR} ;save registers
  480 000005A4 E3A0C000        MOV              R12,#0      ;best column result
                                                            =0
  481 000005A8 E3A0B000        MOV              R11,#0      ;best column index=
                                                            0
  482 000005AC E3A04000        MOV              R4,#0       ;for column index=0
                                                            ;
  483 000005B0 E3A05007        LDR              R5,=COLUMNS ;column index< numb
                                                            er of columns
  484 000005B4 E1540005 
                       nextCol CMP              R4,R5       ;{
  485 000005B8 2A00001C        BHS              MOVE        ;
  486 000005BC E59F02B4        LDR              R0,=BOARD   ; R0->address of th
                                                            e board
  487 000005C0 E1A01004        MOV              R1,R4       ; R1->column to mov
                                                            e



ARM Macro Assembler    Page 14 


  488 000005C4 EBFFFF62        BL               CanMakeMove ; invoke CanMakeMov
                                                            e
  489 000005C8 E3500001        CMP              R0,#1       ; if(!canMakeMove)
  490 000005CC 1A000015        BNE              INC         ; move to increment
                                                            
  491 000005D0 E59F02A0        LDR              R0,=BOARD   ; R0->adress of the
                                                             board
  492 000005D4 E1A01004        MOV              R1,R4       ; R1->index of the 
                                                            column
  493 000005D8 E3A02059        MOV              R2,#'Y'     ; R2->piece to move
                                                             (Y is computer)
  494 000005DC EBFFFF00        BL               MakeMove    ; try to makeMove i
                                                            n this column
  495 000005E0 E150000C        CMP              R0,R12      ; if(count<=maxCoun
                                                            t
  496 000005E4 9A000001        BLS              Rem         ; go to next column
                                                            
  497 000005E8 E1A0C000        MOV              R12,R0      ; else {maxCount=co
                                                            unt
  498 000005EC E1A0B004        MOV              R11,R4      ; indexOfBestColumn
                                                            =columnIndex}
  499 000005F0 E59F0280 
                       Rem     LDR              R0,=BOARD   ; R0->address of th
                                                            e board
  500 000005F4 E1A01004        MOV              R1,R4       ; R1->column the la
                                                            st move was made in
                                                            
  501 000005F8 EB00001F        BL               Remove      ; Remove last move
  502 000005FC E59F0274        LDR              R0,=BOARD   ; R0->adress of the
                                                             board
  503 00000600 E1A01004        MOV              R1,R4       ; R1->index of the 
                                                            column
  504 00000604 E3A02052        MOV              R2,#'R'     ; R2->piece to move
                                                             (R is player)
  505 00000608 EBFFFEF5        BL               MakeMove    ; try to makeMove i
                                                            n this column
  506 0000060C E150000C        CMP              R0,R12      ; if(count<=maxCoun
                                                            t
  507 00000610 9A000001        BLS              Rem2        ; go to next column
                                                            
  508 00000614 E1A0C000        MOV              R12,R0      ; else {maxCount=co
                                                            unt
  509 00000618 E1A0B004        MOV              R11,R4      ; indexOfBestColumn
                                                            =columnIndex}
  510 0000061C E59F0254 
                       Rem2    LDR              R0,=BOARD   ; R0->address of th
                                                            e board
  511 00000620 E1A01004        MOV              R1,R4       ; R1->column the la
                                                            st move was made in
                                                            
  512 00000624 EB000014        BL               Remove      ; Remove last move
  513 00000628 E2844001 
                       INC     ADD              R4,R4,#1    ; columnIndex++
  514 0000062C EAFFFFE0        B                nextCol     ;}
  515 00000630 E59F0260 
                       MOVE    LDR              R0,=str_com_move ;Print out whe
                                                            re the computer mak
                                                            es its move
  516 00000634 EB000037        BL               puts        ;



ARM Macro Assembler    Page 15 


  517 00000638 E28B0031        ADD              R0,R11,#0x31 ;Convert the index
                                                             of the column to c
                                                            har+1
  518 0000063C EB00002A        BL               put         ;put it out
  519 00000640 E59F0230        LDR              R0,=BOARD   ;R0->address of the
                                                             board
  520 00000644 E1A0100B        MOV              R1,R11      ;R1->best column to
                                                             insert
  521 00000648 E3A02059        MOV              R2,#'Y'     ;R2->piece to inser
                                                            t
  522 0000064C EBFFFEE4        BL               MakeMove    ;make the best move
                                                            
  523 00000650 E3500004        CMP              R0,#4       ;check for win
  524 00000654 BA000007        BLT              noWin       ;if(!won) go return
                                                            
  525 00000658 E59F0218        LDR              R0,=BOARD   ;R0=address of the 
                                                            board
  526 0000065C E3A01006        LDR              R1,=ROWS    ;R1=number of rows
  527 00000660 E3A02007        LDR              R2,=COLUMNS ;R2=number of colum
                                                            ns
  528 00000664 EBFFFF11        BL               Draw        ;Draw the state of 
                                                            the board after win
                                                            ning move
  529 00000668 E59F022C        LDR              R0,=str_com_win ;display comput
                                                            er win message
  530 0000066C EB000029        BL               puts        ;
  531 00000670 E28DD028        ADD              SP,SP,#40   ;Pop all the regist
                                                            ers of the stack
  532 00000674 EAFFFE93        B                stop        ;stop the program
  533 00000678 E8BD9FF0 
                       noWin   POP              {R4-R12,PC} ;restore used regis
                                                            ters
  534 0000067C         
  535 0000067C         ;Remove 
  536 0000067C         ;Takes in the address of the board and the index of the 
                       column 
  537 0000067C         ;Changes the highest non-empty place in the column to 0
  538 0000067C         ;input:
  539 0000067C         ;R0->address of the board
  540 0000067C         ;R1->column from which it removes
  541 0000067C         ;no return
  542 0000067C         Remove
  543 0000067C E92D41F0        PUSH             {R4-R8,LR}  ;save registers
  544 00000680 E1A04000        MOV              R4,R0       ;R4=address of the 
                                                            board
  545 00000684 E1A05001        MOV              R5,R1       ;R5=index of the co
                                                            lumn
  546 00000688 E3A06007        MOV              R6,#COLUMNS ;R6=number of eleme
                                                            nts in a row
  547 0000068C E1A08005        MOV              R8,R5       ;R8=index of curren
                                                            t element in the bo
                                                            ard
  548 00000690 E7D47008 
                       Rem1    LDRB             R7,[R4,R8]  ;load the element o
                                                            f the column
  549 00000694 E3570030        CMP              R7,#0x30    ;is r7='0'
  550 00000698 0A000002        BEQ              Rem0        ;if (r7=='0' read n
                                                            ext element)
  551 0000069C E3A00030        MOV              R0,#0x30    ;else  {R0='0'



ARM Macro Assembler    Page 16 


  552 000006A0 E7C40008        STRB             R0,[R4,R8]  ; change the highes
                                                            t element to '0'
  553 000006A4 EA000001        B                RemFin      ; finished remove}
  554 000006A8 E0888006 
                       Rem0    ADD              R8,R8,R6    ;go to next row in 
                                                            this column
  555 000006AC EAFFFFF7        B                Rem1        ;Load next characte
                                                            r
  556 000006B0 E8BD81F0 
                       RemFin  POP              {R4-R8,PC}  ;Restore registers 
                                                            when finished
  557 000006B4         ; inithw subroutines
  558 000006B4         ; performs hardware initialisation, including console
  559 000006B4         ; parameters:
  560 000006B4         ; none
  561 000006B4         ; return value:
  562 000006B4         ; none
  563 000006B4         ;
  564 000006B4         inithw
  565 000006B4 E59F01F0        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  566 000006B8 E3A01050        MOV              R1, #0x50
  567 000006BC E5C01000        STRB             R1, [R0]
  568 000006C0 E59F01E8        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  569 000006C4 E3A01002        LDR              R1, =0x02
  570 000006C8 E5C01000        STRB             R1, [R0]
  571 000006CC E12FFF1E        BX               LR
  572 000006D0         
  573 000006D0         ;
  574 000006D0         ; get subroutine
  575 000006D0         ; returns the ASCII code of the next character read on t
                       he console
  576 000006D0         ; parameters:
  577 000006D0         ; none
  578 000006D0         ; return value:
  579 000006D0         ; R0 - ASCII code of the character read on teh console (
                       byte)
  580 000006D0         ;
  581 000006D0 E59F11DC 
                       get     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  582 000006D4 E5910000 
                       get0    LDR              R0, [R1]    ; wait until
  583 000006D8 E2100001        ANDS             R0, #0x01   ; receiver data
  584 000006DC 0AFFFFFC        BEQ              get0        ; ready
  585 000006E0 E59F11D0        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  586 000006E4 E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  587 000006E8 E12FFF1E        BX               LR          ; return
  588 000006EC         
  589 000006EC         ;
  590 000006EC         ; put subroutine
  591 000006EC         ; writes a character to the console
  592 000006EC         ; parameters:
  593 000006EC         ; R0 - ASCII code of the character to write
  594 000006EC         ; return value:



ARM Macro Assembler    Page 17 


  595 000006EC         ; none
  596 000006EC         ;
  597 000006EC E59F11C0 
                       put     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  598 000006F0 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  599 000006F4 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  600 000006F8 0AFFFFFB        BEQ              put         ; empty
  601 000006FC E59F11B4        LDR              R1, =U0THR  ; R1 -> U0THR
  602 00000700 E5C10000        STRB             R0, [R1]    ; output charcter
  603 00000704 E59F11A8 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  604 00000708 E5D11000        LDRB             R1, [R1]    ; wait until
  605 0000070C E2111040        ANDS             R1, R1, #0x40 ; transmitter
  606 00000710 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  607 00000714 E12FFF1E        BX               LR          ; return
  608 00000718         
  609 00000718         ;
  610 00000718         ; puts subroutine
  611 00000718         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  612 00000718         ; parameters:
  613 00000718         ; R0 - address of NULL-terminated ASCII string
  614 00000718         ; return value:
  615 00000718         ; R0 - ASCII code of the character read on teh console (
                       byte)
  616 00000718         ;
  617 00000718 E92D4010 
                       puts    STMFD            SP!, {R4, LR} ; push R4 and LR
  618 0000071C E1A04000        MOV              R4, R0      ; copy R0
  619 00000720 E4D40001 
                       puts0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  620 00000724 E3500000        CMP              R0, #0      ; 0?
  621 00000728 0A000001        BEQ              puts1       ; return
  622 0000072C EBFFFFEE        BL               put         ; put character
  623 00000730 EAFFFFFA        B                puts0       ; next character
  624 00000734 E8BD8010 
                       puts1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  625 00000738         
  626 00000738         
  627 00000738         ;
  628 00000738         ; hint! put the strings used by your program here ...
  629 00000738         ;
  630 00000738         
  631 00000738         str_go
  632 00000738 4C 65 74 
              27 73 20 
              70 6C 61 
              79 20 43 
              6F 6E 6E 
              65 63 74 
              34 21 21 
              0A 0D 00         DCB              "Let's play Connect4!!",0xA, 0x
D, 0
  633 00000750         



ARM Macro Assembler    Page 18 


  634 00000750         str_not_valid
  635 00000750 0D 59 6F 
              75 20 63 
              61 6E 6E 
              6F 74 20 
              6D 61 6B 
              65 20 61 
              20 6D 6F 
              76 65 20 
              74 68 65 
              72 65 2C 
              20 74 72 
              79 20 61 
              67 61 69 
              6E 2E 00         DCB              0xD,"You cannot make a move the
re, try again.",0x0
  636 0000077A         
  637 0000077A         str_input
  638 0000077A 50 6C 65 
              61 73 65 
              20 69 6E 
              70 75 74 
              20 74 68 
              65 20 6E 
              75 6D 62 
              65 72 20 
              6F 66 20 
              74 68 65 
              20 63 6F 
              6C 75 6D 
              6E 20 79 
              6F 75 20 
              77 61 6E 
              74 20 74 
              6F 20 75 
              73 65 2E 
              28 31 2D 
              37 2C 71 
              20 74 6F 
              20 72 65 
              73 65 74 
              29 0A 0D 
              00               DCB              "Please input the number of the
 column you want to use.(1-7,q to reset)",0xA,0xD,0
  639 000007C3         
  640 000007C3         str_congratulations
  641 000007C3 43 6F 6E 
              67 72 61 
              74 75 6C 
              61 74 69 
              6F 6E 73 
              20 00            DCB              "Congratulations ",0
  642 000007D4         
  643 000007D4         str_win_message
  644 000007D4 2C 20 59 
              6F 75 20 
              68 61 76 
              65 20 77 
              6F 6E 21 



ARM Macro Assembler    Page 19 


              0A 0D 00         DCB              ", You have won!", 0xA, 0xD, 0
  645 000007E6         
  646 000007E6         str_piece
  647 000007E6 4E 6F 77 
              20 70 6C 
              61 79 69 
              6E 67 3A 
              20 00            DCB              "Now playing: ",0
  648 000007F4         str_com_win
  649 000007F4 43 6F 6D 
              70 75 74 
              65 72 20 
              77 69 6E 
              73 21 00         DCB              "Computer wins!",0
  650 00000803         str_com_move
  651 00000803 43 6F 6D 
              70 75 74 
              65 72 20 
              6D 6F 76 
              65 64 20 
              69 6E 20 
              63 6F 6C 
              75 6D 6E 
              20 00            DCB              "Computer moved in column ",0
  652 0000081D         str_game_mode
  653 0000081D 50 6C 65 
              61 73 65 
              20 69 6E 
              70 75 74 
              20 6D 20 
              69 66 20 
              79 6F 75 
              20 77 61 
              6E 74 20 
              74 6F 20 
              70 6C 61 
              79 20 77 
              69 74 68 
              20 61 6E 
              6F 74 68 
              65 72 20 
              70 6C 61 
              79 65 72 
              2C 20 6F 
              72 20 73 
              20 74 6F 
              20 70 6C 
              61 79 20 
              73 69 6E 
              67 6C 65 
              20 70 6C 
              61 79 65 
              72 0A 0D 
              00               DCB              "Please input m if you want to 
play with another player, or s to play single player",0xA,0xD,0
  654 00000872                 END
              00 00 40010000 
              00000000 
              00000000 



ARM Macro Assembler    Page 20 


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\connect4.d -o.\objects\connect4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 526" --list=.\listings\connect4.lst connect4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BOARD 00000000

Symbol: BOARD
   Definitions
      At line 18 in file connect4.s
   Uses
      At line 38 in file connect4.s
      At line 51 in file connect4.s
      At line 74 in file connect4.s
      At line 78 in file connect4.s
      At line 89 in file connect4.s
      At line 107 in file connect4.s
      At line 111 in file connect4.s
      At line 134 in file connect4.s
      At line 202 in file connect4.s
      At line 209 in file connect4.s
      At line 216 in file connect4.s
      At line 224 in file connect4.s
      At line 486 in file connect4.s
      At line 491 in file connect4.s
      At line 499 in file connect4.s
      At line 502 in file connect4.s
      At line 510 in file connect4.s
      At line 519 in file connect4.s
      At line 525 in file connect4.s

globals 00000000

Symbol: globals
   Definitions
      At line 17 in file connect4.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CCol0 00000414

Symbol: CCol0
   Definitions
      At line 358 in file connect4.s
   Uses
      At line 371 in file connect4.s
Comment: CCol0 used once
CCol1 0000043C

Symbol: CCol1
   Definitions
      At line 368 in file connect4.s
   Uses
      At line 366 in file connect4.s
Comment: CCol1 used once
CColFor 00000440

Symbol: CColFor
   Definitions
      At line 369 in file connect4.s
   Uses
      At line 364 in file connect4.s
Comment: CColFor used once
CDU0 00000534

Symbol: CDU0
   Definitions
      At line 444 in file connect4.s
   Uses
      At line 440 in file connect4.s
Comment: CDU0 used once
CDU1 00000540

Symbol: CDU1
   Definitions
      At line 447 in file connect4.s
   Uses
      At line 443 in file connect4.s
Comment: CDU1 used once
CDU2 00000548

Symbol: CDU2
   Definitions
      At line 449 in file connect4.s
   Uses
      At line 466 in file connect4.s
Comment: CDU2 used once
CDU3 00000578

Symbol: CDU3
   Definitions
      At line 461 in file connect4.s
   Uses
      At line 459 in file connect4.s
Comment: CDU3 used once
CDUFor 0000057C

Symbol: CDUFor



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 462 in file connect4.s
   Uses
      At line 457 in file connect4.s
Comment: CDUFor used once
CMM0 0000037C

Symbol: CMM0
   Definitions
      At line 300 in file connect4.s
   Uses
      At line 292 in file connect4.s
      At line 294 in file connect4.s
      At line 297 in file connect4.s

CMM1 00000380

Symbol: CMM1
   Definitions
      At line 301 in file connect4.s
   Uses
      At line 299 in file connect4.s
Comment: CMM1 used once
CRow0 000003A8

Symbol: CRow0
   Definitions
      At line 320 in file connect4.s
   Uses
      At line 333 in file connect4.s
Comment: CRow0 used once
CRow1 000003D4

Symbol: CRow1
   Definitions
      At line 331 in file connect4.s
   Uses
      At line 329 in file connect4.s
Comment: CRow1 used once
CRowFor 000003D8

Symbol: CRowFor
   Definitions
      At line 332 in file connect4.s
   Uses
      At line 327 in file connect4.s
Comment: CRowFor used once
CUD0 00000490

Symbol: CUD0
   Definitions
      At line 401 in file connect4.s
   Uses
      At line 397 in file connect4.s
Comment: CUD0 used once
CUD1 00000498

Symbol: CUD1
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 403 in file connect4.s
   Uses
      At line 400 in file connect4.s
Comment: CUD1 used once
CUD2 000004A0

Symbol: CUD2
   Definitions
      At line 405 in file connect4.s
   Uses
      At line 422 in file connect4.s
Comment: CUD2 used once
CUD3 000004D0

Symbol: CUD3
   Definitions
      At line 417 in file connect4.s
   Uses
      At line 415 in file connect4.s
Comment: CUD3 used once
CUDFor 000004D4

Symbol: CUDFor
   Definitions
      At line 418 in file connect4.s
   Uses
      At line 413 in file connect4.s
Comment: CUDFor used once
CanMakeMove 00000354

Symbol: CanMakeMove
   Definitions
      At line 289 in file connect4.s
   Uses
      At line 75 in file connect4.s
      At line 108 in file connect4.s
      At line 488 in file connect4.s

ComputerMove 000005A0

Symbol: ComputerMove
   Definitions
      At line 478 in file connect4.s
   Uses
      At line 57 in file connect4.s
Comment: ComputerMove used once
CountCol 000003F0

Symbol: CountCol
   Definitions
      At line 348 in file connect4.s
   Uses
      At line 212 in file connect4.s
Comment: CountCol used once
CountDownUp 000004F8

Symbol: CountDownUp
   Definitions
      At line 428 in file connect4.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 228 in file connect4.s
Comment: CountDownUp used once
CountRow 00000384

Symbol: CountRow
   Definitions
      At line 310 in file connect4.s
   Uses
      At line 205 in file connect4.s
Comment: CountRow used once
CountUpDown 0000045C

Symbol: CountUpDown
   Definitions
      At line 387 in file connect4.s
   Uses
      At line 220 in file connect4.s
Comment: CountUpDown used once
DRAW0 000002D4

Symbol: DRAW0
   Definitions
      At line 251 in file connect4.s
   Uses
      At line 259 in file connect4.s
Comment: DRAW0 used once
DRAW1 000002F8

Symbol: DRAW1
   Definitions
      At line 261 in file connect4.s
   Uses
      At line 252 in file connect4.s
Comment: DRAW1 used once
DRAW2 00000318

Symbol: DRAW2
   Definitions
      At line 269 in file connect4.s
   Uses
      At line 278 in file connect4.s
Comment: DRAW2 used once
DRAW3 00000340

Symbol: DRAW3
   Definitions
      At line 279 in file connect4.s
   Uses
      At line 270 in file connect4.s
Comment: DRAW3 used once
DRAW4 000002FC

Symbol: DRAW4
   Definitions
      At line 262 in file connect4.s
   Uses
      At line 280 in file connect4.s
Comment: DRAW4 used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

DRAW5 00000348

Symbol: DRAW5
   Definitions
      At line 281 in file connect4.s
   Uses
      At line 263 in file connect4.s
Comment: DRAW5 used once
Draw 000002B0

Symbol: Draw
   Definitions
      At line 240 in file connect4.s
   Uses
      At line 54 in file connect4.s
      At line 92 in file connect4.s
      At line 137 in file connect4.s
      At line 528 in file connect4.s

Fori 000001AC

Symbol: Fori
   Definitions
      At line 160 in file connect4.s
   Uses
      At line 172 in file connect4.s
Comment: Fori used once
Forj 000001B8

Symbol: Forj
   Definitions
      At line 163 in file connect4.s
   Uses
      At line 170 in file connect4.s
Comment: Forj used once
INC 00000628

Symbol: INC
   Definitions
      At line 513 in file connect4.s
   Uses
      At line 490 in file connect4.s
Comment: INC used once
INITEND 000001E0

Symbol: INITEND
   Definitions
      At line 173 in file connect4.s
   Uses
      At line 161 in file connect4.s
Comment: INITEND used once
INSERT 00000220

Symbol: INSERT
   Definitions
      At line 197 in file connect4.s
   Uses
      At line 192 in file connect4.s
      At line 195 in file connect4.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


Initialize 00000198

Symbol: Initialize
   Definitions
      At line 154 in file connect4.s
   Uses
      At line 41 in file connect4.s
Comment: Initialize used once
LOOP 000001FC

Symbol: LOOP
   Definitions
      At line 188 in file connect4.s
   Uses
      At line 196 in file connect4.s
Comment: LOOP used once
MM0 00000250

Symbol: MM0
   Definitions
      At line 209 in file connect4.s
   Uses
      At line 207 in file connect4.s
Comment: MM0 used once
MM1 0000026C

Symbol: MM1
   Definitions
      At line 216 in file connect4.s
   Uses
      At line 214 in file connect4.s
Comment: MM1 used once
MM2 0000028C

Symbol: MM2
   Definitions
      At line 224 in file connect4.s
   Uses
      At line 222 in file connect4.s
Comment: MM2 used once
MM3 000002AC

Symbol: MM3
   Definitions
      At line 232 in file connect4.s
   Uses
      At line 230 in file connect4.s
Comment: MM3 used once
MOVE 00000630

Symbol: MOVE
   Definitions
      At line 515 in file connect4.s
   Uses
      At line 485 in file connect4.s
Comment: MOVE used once
MakeMove 000001E4




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Symbol: MakeMove
   Definitions
      At line 181 in file connect4.s
   Uses
      At line 81 in file connect4.s
      At line 114 in file connect4.s
      At line 494 in file connect4.s
      At line 505 in file connect4.s
      At line 522 in file connect4.s

NotValid 00000154

Symbol: NotValid
   Definitions
      At line 124 in file connect4.s
   Uses
      At line 77 in file connect4.s
Comment: NotValid used once
NotValidM 00000160

Symbol: NotValidM
   Definitions
      At line 129 in file connect4.s
   Uses
      At line 110 in file connect4.s
Comment: NotValidM used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 26 in file connect4.s
   Uses
      None
Comment: RESET unused
Rem 000005F0

Symbol: Rem
   Definitions
      At line 499 in file connect4.s
   Uses
      At line 496 in file connect4.s
Comment: Rem used once
Rem0 000006A8

Symbol: Rem0
   Definitions
      At line 554 in file connect4.s
   Uses
      At line 550 in file connect4.s
Comment: Rem0 used once
Rem1 00000690

Symbol: Rem1
   Definitions
      At line 548 in file connect4.s
   Uses
      At line 555 in file connect4.s
Comment: Rem1 used once
Rem2 0000061C



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols


Symbol: Rem2
   Definitions
      At line 510 in file connect4.s
   Uses
      At line 507 in file connect4.s
Comment: Rem2 used once
RemFin 000006B0

Symbol: RemFin
   Definitions
      At line 556 in file connect4.s
   Uses
      At line 553 in file connect4.s
Comment: RemFin used once
Remove 0000067C

Symbol: Remove
   Definitions
      At line 542 in file connect4.s
   Uses
      At line 501 in file connect4.s
      At line 512 in file connect4.s

Restart 00000008

Symbol: Restart
   Definitions
      At line 38 in file connect4.s
   Uses
      At line 71 in file connect4.s
      At line 104 in file connect4.s

RetCRow 000003EC

Symbol: RetCRow
   Definitions
      At line 337 in file connect4.s
   Uses
      At line 335 in file connect4.s
Comment: RetCRow used once
Won 0000016C

Symbol: Won
   Definitions
      At line 134 in file connect4.s
   Uses
      At line 83 in file connect4.s
      At line 116 in file connect4.s

eForj 000001D8

Symbol: eForj
   Definitions
      At line 171 in file connect4.s
   Uses
      At line 164 in file connect4.s
Comment: eForj used once
endCCol 0000044C



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols


Symbol: endCCol
   Definitions
      At line 372 in file connect4.s
   Uses
      At line 359 in file connect4.s
Comment: endCCol used once
endCDU 00000590

Symbol: endCDU
   Definitions
      At line 467 in file connect4.s
   Uses
      At line 450 in file connect4.s
      At line 452 in file connect4.s

endCRow 000003E0

Symbol: endCRow
   Definitions
      At line 334 in file connect4.s
   Uses
      At line 321 in file connect4.s
Comment: endCRow used once
endCUD 000004E8

Symbol: endCUD
   Definitions
      At line 423 in file connect4.s
   Uses
      At line 406 in file connect4.s
      At line 408 in file connect4.s

get 000006D0

Symbol: get
   Definitions
      At line 581 in file connect4.s
   Uses
      At line 47 in file connect4.s
      At line 68 in file connect4.s
      At line 101 in file connect4.s

get0 000006D4

Symbol: get0
   Definitions
      At line 582 in file connect4.s
   Uses
      At line 584 in file connect4.s
Comment: get0 used once
inithw 000006B4

Symbol: inithw
   Definitions
      At line 564 in file connect4.s
   Uses
      At line 33 in file connect4.s
Comment: inithw used once



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

multi 000000CC

Symbol: multi
   Definitions
      At line 89 in file connect4.s
   Uses
      At line 50 in file connect4.s
      At line 120 in file connect4.s
      At line 122 in file connect4.s

nextCol 000005B4

Symbol: nextCol
   Definitions
      At line 484 in file connect4.s
   Uses
      At line 514 in file connect4.s
Comment: nextCol used once
noWin 00000678

Symbol: noWin
   Definitions
      At line 533 in file connect4.s
   Uses
      At line 524 in file connect4.s
Comment: noWin used once
player 00000060

Symbol: player
   Definitions
      At line 60 in file connect4.s
   Uses
      At line 56 in file connect4.s
Comment: player used once
put 000006EC

Symbol: put
   Definitions
      At line 597 in file connect4.s
   Uses
      At line 48 in file connect4.s
      At line 65 in file connect4.s
      At line 67 in file connect4.s
      At line 69 in file connect4.s
      At line 98 in file connect4.s
      At line 100 in file connect4.s
      At line 102 in file connect4.s
      At line 141 in file connect4.s
      At line 246 in file connect4.s
      At line 249 in file connect4.s
      At line 254 in file connect4.s
      At line 257 in file connect4.s
      At line 265 in file connect4.s
      At line 267 in file connect4.s
      At line 272 in file connect4.s
      At line 276 in file connect4.s
      At line 282 in file connect4.s
      At line 518 in file connect4.s
      At line 600 in file connect4.s



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

      At line 622 in file connect4.s

put0 00000704

Symbol: put0
   Definitions
      At line 603 in file connect4.s
   Uses
      At line 606 in file connect4.s
Comment: put0 used once
puts 00000718

Symbol: puts
   Definitions
      At line 617 in file connect4.s
   Uses
      At line 44 in file connect4.s
      At line 46 in file connect4.s
      At line 61 in file connect4.s
      At line 63 in file connect4.s
      At line 94 in file connect4.s
      At line 96 in file connect4.s
      At line 126 in file connect4.s
      At line 131 in file connect4.s
      At line 139 in file connect4.s
      At line 143 in file connect4.s
      At line 516 in file connect4.s
      At line 530 in file connect4.s

puts0 00000720

Symbol: puts0
   Definitions
      At line 619 in file connect4.s
   Uses
      At line 623 in file connect4.s
Comment: puts0 used once
puts1 00000734

Symbol: puts1
   Definitions
      At line 624 in file connect4.s
   Uses
      At line 621 in file connect4.s
Comment: puts1 used once
resCCol 00000430

Symbol: resCCol
   Definitions
      At line 365 in file connect4.s
   Uses
      At line 362 in file connect4.s
Comment: resCCol used once
resCDU 0000056C

Symbol: resCDU
   Definitions
      At line 458 in file connect4.s
   Uses



ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols

      At line 455 in file connect4.s
Comment: resCDU used once
resCRow 000003C8

Symbol: resCRow
   Definitions
      At line 328 in file connect4.s
   Uses
      At line 325 in file connect4.s
Comment: resCRow used once
resCUD 000004C4

Symbol: resCUD
   Definitions
      At line 414 in file connect4.s
   Uses
      At line 411 in file connect4.s
Comment: resCUD used once
retCCol 00000458

Symbol: retCCol
   Definitions
      At line 375 in file connect4.s
   Uses
      At line 373 in file connect4.s
Comment: retCCol used once
retCDU 0000059C

Symbol: retCDU
   Definitions
      At line 470 in file connect4.s
   Uses
      At line 468 in file connect4.s
Comment: retCDU used once
retCUD 000004F4

Symbol: retCUD
   Definitions
      At line 426 in file connect4.s
   Uses
      At line 424 in file connect4.s
Comment: retCUD used once
single 0000003C

Symbol: single
   Definitions
      At line 51 in file connect4.s
   Uses
      At line 59 in file connect4.s
      At line 85 in file connect4.s
      At line 127 in file connect4.s
      At line 132 in file connect4.s

stop 000000C8

Symbol: stop
   Definitions
      At line 86 in file connect4.s
   Uses



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Relocatable symbols

      At line 86 in file connect4.s
      At line 144 in file connect4.s
      At line 532 in file connect4.s

str_com_move 00000803

Symbol: str_com_move
   Definitions
      At line 650 in file connect4.s
   Uses
      At line 515 in file connect4.s
Comment: str_com_move used once
str_com_win 000007F4

Symbol: str_com_win
   Definitions
      At line 648 in file connect4.s
   Uses
      At line 529 in file connect4.s
Comment: str_com_win used once
str_congratulations 000007C3

Symbol: str_congratulations
   Definitions
      At line 640 in file connect4.s
   Uses
      At line 138 in file connect4.s
Comment: str_congratulations used once
str_game_mode 0000081D

Symbol: str_game_mode
   Definitions
      At line 652 in file connect4.s
   Uses
      At line 45 in file connect4.s
Comment: str_game_mode used once
str_go 00000738

Symbol: str_go
   Definitions
      At line 631 in file connect4.s
   Uses
      At line 43 in file connect4.s
Comment: str_go used once
str_input 0000077A

Symbol: str_input
   Definitions
      At line 637 in file connect4.s
   Uses
      At line 60 in file connect4.s
      At line 93 in file connect4.s

str_not_valid 00000750

Symbol: str_not_valid
   Definitions
      At line 634 in file connect4.s
   Uses



ARM Macro Assembler    Page 14 Alphabetic symbol ordering
Relocatable symbols

      At line 125 in file connect4.s
      At line 130 in file connect4.s

str_piece 000007E6

Symbol: str_piece
   Definitions
      At line 646 in file connect4.s
   Uses
      At line 62 in file connect4.s
      At line 95 in file connect4.s

str_win_message 000007D4

Symbol: str_win_message
   Definitions
      At line 643 in file connect4.s
   Uses
      At line 142 in file connect4.s
Comment: str_win_message used once
toR 0000014C

Symbol: toR
   Definitions
      At line 121 in file connect4.s
   Uses
      At line 118 in file connect4.s
Comment: toR used once
92 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

COLUMNS 00000007

Symbol: COLUMNS
   Definitions
      At line 15 in file connect4.s
   Uses
      At line 40 in file connect4.s
      At line 53 in file connect4.s
      At line 91 in file connect4.s
      At line 136 in file connect4.s
      At line 186 in file connect4.s
      At line 293 in file connect4.s
      At line 317 in file connect4.s
      At line 356 in file connect4.s
      At line 393 in file connect4.s
      At line 420 in file connect4.s
      At line 434 in file connect4.s
      At line 464 in file connect4.s
      At line 483 in file connect4.s
      At line 527 in file connect4.s
      At line 546 in file connect4.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 8 in file connect4.s
   Uses
      At line 565 in file connect4.s
Comment: PINSEL0 used once
ROWS 00000006

Symbol: ROWS
   Definitions
      At line 14 in file connect4.s
   Uses
      At line 39 in file connect4.s
      At line 52 in file connect4.s
      At line 90 in file connect4.s
      At line 135 in file connect4.s
      At line 194 in file connect4.s
      At line 355 in file connect4.s
      At line 394 in file connect4.s
      At line 435 in file connect4.s
      At line 445 in file connect4.s
      At line 526 in file connect4.s

U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 11 in file connect4.s
   Uses
      At line 568 in file connect4.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 12 in file connect4.s
   Uses
      At line 581 in file connect4.s
      At line 597 in file connect4.s
      At line 603 in file connect4.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 9 in file connect4.s
   Uses
      At line 585 in file connect4.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 10 in file connect4.s
   Uses
      At line 601 in file connect4.s
Comment: U0THR used once
7 symbols
435 symbols in table
